{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-jmantraining-dev"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"DB_consolidateddb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DB_consolidateddb'"
		},
		"DB_stagingtoprep_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DB_stagingtoprep'"
		},
		"LS_mergecustomers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_mergecustomers'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-training.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-jmanTraining"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jenisha"
		},
		"DB_consolidateddb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-training.database.windows.net"
		},
		"DB_consolidateddb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-jmanTraining"
		},
		"DB_consolidateddb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jenisha"
		},
		"DB_stagingtoprep_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-training.database.windows.net"
		},
		"DB_stagingtoprep_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-jmanTraining"
		},
		"DB_stagingtoprep_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jenisha"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_consolidateddb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('DB_consolidateddb_properties_typeProperties_server')]",
					"database": "[parameters('DB_consolidateddb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('DB_consolidateddb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DB_consolidateddb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_stagingtoprep')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('DB_stagingtoprep_properties_typeProperties_server')]",
					"database": "[parameters('DB_stagingtoprep_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('DB_stagingtoprep_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DB_stagingtoprep_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_mergecustomers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_mergecustomers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_consolidatedData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB_consolidateddb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB_consolidateddb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_consolidatedoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB_consolidateddb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "consolidated"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB_consolidateddb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_customeroutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer_consolidated",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ZipCode",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_firstAssIpCustomers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "crfirstassinput001"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_firstAssIpOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass_Datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "crfirstassinput001"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_firstAssOp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "consolidated_orders",
						"container": "crfirstassoutput001"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*orderdetails.xlsx",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_inputOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ordersfinal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer_consolidated",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ZipCode",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Cleaning Customers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "First Assesment"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "ConsolidatedCustomerData",
							"description": "Consolidated Customer Data is taken as source"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"name": "ConsolidatedOrderData",
							"description": "Consolidated Order Data is taken as source"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DB_stagingtoprep",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedCustomerDataToDB",
							"description": "Moving the cleaned customer data in to the db"
						},
						{
							"linkedService": {
								"referenceName": "DB_stagingtoprep",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedOrderData",
							"description": "Moving the cleaned order data in to the db"
						}
					],
					"transformations": [
						{
							"name": "RemovingNullRows",
							"description": "Removing the Rows which contains null value"
						},
						{
							"name": "IdentifyingRedundantData",
							"description": "Adding Rnk Column Removing Duplicate Customer Records"
						},
						{
							"name": "RemovingRedundantRows",
							"description": "Deleting Duplicate Records"
						},
						{
							"name": "SelectingTheNeededColumns",
							"description": "Selecting The Needed Columns with columns 'CustomerID, FirstName, LastName, Email, PhoneNumber, Address, City, State, ZipCode, Country'"
						},
						{
							"name": "DroppingNullRows",
							"description": "Removing the Rows which contains null value"
						},
						{
							"name": "FindingRedundantRecord",
							"description": "Add Rnk column to remove duplicate records"
						},
						{
							"name": "DeletingRedundantRecord",
							"description": "Deleting Duplicate Records"
						},
						{
							"name": "SelectingTheRequiredColumn",
							"description": "selecting the needed column"
						},
						{
							"name": "ChangingtheDataType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          PhoneNumber as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'customers_consolidated',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ConsolidatedCustomerData",
						"source(output(",
						"          OrderID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          OrderTimestamp as string,",
						"          Price as string,",
						"          CustomerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'orders_consolidated',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ConsolidatedOrderData",
						"ConsolidatedCustomerData filter(!isNull(CustomerID)) ~> RemovingNullRows",
						"RemovingNullRows window(over(CustomerID),",
						"     asc(CustomerID, true),",
						"     Rnk = rowNumber()) ~> IdentifyingRedundantData",
						"IdentifyingRedundantData filter(Rnk==1) ~> RemovingRedundantRows",
						"RemovingRedundantRows select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          PhoneNumber,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingTheNeededColumns",
						"ConsolidatedOrderData filter(!isNull(OrderID) && !isNull(CustomerID)) ~> DroppingNullRows",
						"DroppingNullRows window(over(OrderID),",
						"     asc(OrderID, true),",
						"     Rnk = rowNumber()) ~> FindingRedundantRecord",
						"FindingRedundantRecord filter(Rnk==1) ~> DeletingRedundantRecord",
						"DeletingRedundantRecord select(mapColumn(",
						"          OrderID,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          OrderTimestamp,",
						"          Price,",
						"          CustomerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingTheRequiredColumn",
						"SelectingTheRequiredColumn cast(output(",
						"          OrderID as integer,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          OrderTimestamp as date,",
						"          Price as float,",
						"          CustomerID as string",
						"     ),",
						"     errors: true) ~> ChangingtheDataType",
						"SelectingTheNeededColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'customers',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedCustomerDataToDB",
						"ChangingtheDataType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'Orders',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedOrderData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/linkedServices/DB_stagingtoprep')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Reporting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "First Assesment"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DB_consolidateddb",
								"type": "LinkedServiceReference"
							},
							"name": "OrdersTableinPrep"
						},
						{
							"linkedService": {
								"referenceName": "DB_consolidateddb",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerTableinPrep"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DB_consolidateddb",
								"type": "LinkedServiceReference"
							},
							"name": "MoveDataToReporting",
							"description": "Creating Fact Table"
						}
					],
					"transformations": [
						{
							"name": "JoiningOrdersAndCustomers",
							"description": "Perform join to find the orders made by each customers"
						},
						{
							"name": "SelectingRequiredColumns",
							"description": "selecting the needed columns for fact table"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          OrderTimestamp as date,",
						"          Price as float,",
						"          CustomerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'Orders',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> OrdersTableinPrep",
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          PhoneNumber as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'customers',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> CustomerTableinPrep",
						"OrdersTableinPrep, CustomerTableinPrep join(OrdersTableinPrep@CustomerID == CustomerTableinPrep@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningOrdersAndCustomers",
						"JoiningOrdersAndCustomers select(mapColumn(",
						"          CustomerID = CustomerTableinPrep@CustomerID,",
						"          OrderID,",
						"          FirstName,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingRequiredColumns",
						"SelectingRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'OrdersByCustomer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MoveDataToReporting"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB_consolidateddb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_superstore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_mergecustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "240826 Superstore.csv",
						"container": "crsecondassinput001"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Row ID",
						"type": "String"
					},
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Postal Code",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Product ID",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Sub-Category",
						"type": "String"
					},
					{
						"name": "Product Name",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": "Profit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_mergecustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Second Assesment"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DB_consolidateddb",
								"type": "LinkedServiceReference"
							},
							"name": "GettingDataFromStaging"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DB_consolidateddb",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Row ID} as string,",
						"          {Order ID} as string,",
						"          {Order Date} as string,",
						"          {Ship Date} as string,",
						"          {Ship Mode} as string,",
						"          {Customer ID} as string,",
						"          {Customer Name} as string,",
						"          Segment as string,",
						"          Country as string,",
						"          City as string,",
						"          State as string,",
						"          {Postal Code} as string,",
						"          Region as string,",
						"          {Product ID} as string,",
						"          Category as string,",
						"          {Sub-Category} as string,",
						"          {Product Name} as string,",
						"          Sales as string,",
						"          Quantity as string,",
						"          Discount as string,",
						"          Profit as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'store',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> GettingDataFromStaging",
						"GettingDataFromStaging select(mapColumn(",
						"          {Row ID},",
						"          {Order ID},",
						"          {Order Date},",
						"          {Ship Date},",
						"          {Ship Mode},",
						"          {Customer ID},",
						"          {Product ID},",
						"          {Product Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'order_stores',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB_consolidateddb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Merge Customer Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Consolidate Customer Data",
						"description": "separating customer data and consolidating it",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*customerdetails.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PhoneNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PhoneNumber",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ZipCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_firstAssIpCustomers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_firstAssOp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "First Assesment/Merging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_firstAssIpCustomers')]",
				"[concat(variables('factoryId'), '/datasets/DS_firstAssOp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Merge Orders Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Consolidate orders data",
						"description": "Separate orders data and consolidating it",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*orderdetails.xlsx",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ProductName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "OrderTimestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderTimestamp",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_firstAssIpOrders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_firstAssOp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "First Assesment/Merging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_firstAssIpOrders')]",
				"[concat(variables('factoryId'), '/datasets/DS_firstAssOp')]"
			]
		}
	]
}